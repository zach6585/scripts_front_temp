{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/moust/Documents/Scripts/frontend/src/components/scripts/script5/pages/page4/page4.js\",\n    _s = $RefreshSig$();\n\nimport { connect } from 'react-redux';\nimport { patchTexts, postTexts } from '../../../../../actions/text';\nimport { toggleCommentMode } from '../../../../../actions/comment';\nimport { useState, useEffect } from 'react';\nimport Sidebar from '../../../general pages/sidebar';\nimport ScavengerHunt from './scavengerhunt';\nimport OwnActivity from './ownactivity';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Page4 = props => {\n  _s();\n\n  const [sideBar, setSidebar] = useState(null);\n  const [blur, setBlur] = useState(\"\");\n  const [own, setOwn] = useState(null);\n  const [scav, setScav] = useState(null);\n  useEffect(() => {\n    setBlur(\"\");\n    setSidebar(null);\n  }, [props.sendingComment]);\n\n  const handleButtonClick = (event, choice) => {\n    /* Determines the outcome of the button press. If it's 2 then we do a scavenger hunt and render that component */\n    if (choice === 2) {\n      setOwn( /*#__PURE__*/_jsxDEV(OwnActivity, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 20\n      }, this));\n      setScav(null);\n    } else if (choice === 1) {\n      setOwn(null);\n      setScav( /*#__PURE__*/_jsxDEV(ScavengerHunt, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this));\n    }\n  };\n\n  const handleCommentClick = event => {\n    //Here is where you render the sidebar\n    if (props.commentMode === 'commentModeOn') {\n      if (blur === \"\") {\n        setBlur(\"blur\");\n      } else {\n        setBlur(\"\");\n      }\n\n      if (sideBar === null) {\n        setSidebar( /*#__PURE__*/_jsxDEV(Sidebar, {\n          id_tag: event.target.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 28\n        }, this));\n      }\n\n      props.toggleCommentMode();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `sheet ${blur}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: `bold center ${props.commentMode}`,\n        id: \"h1\",\n        onClick: event => handleCommentClick(event),\n        children: \"Icebreaker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left container_for_medium_margin\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: props.commentMode,\n          id: \"p_1\",\n          onClick: event => handleCommentClick(event),\n          children: \"Think of an activity you want to do for about 10 minutes with your mentee.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          id: \"button_list\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: `li_button ${props.commentMode}`,\n            id: \"li_1\",\n            onClick: event => handleCommentClick(event),\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: event => handleButtonClick(event, 2),\n              children: \"press\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 129\n            }, this), \"I want to think of my own activity\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this), own, /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `li_button ${props.commentMode}`,\n            id: \"li_2\",\n            onClick: event => handleCommentClick(event),\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: event => handleButtonClick(event, 1),\n              children: \"press\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 129\n            }, this), \"I want to do 1 more scavenger hunt\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this), scav]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), sideBar]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Page4, \"IeByxm+IDutlzitv+6oMlMFcQJU=\");\n\n_c = Page4;\n\nconst mapStateToProps = state => {\n  return {\n    texts: state.texts.curatedTextsFromCurrentScript,\n    mentee_id: state.mentees.current_mentee_id,\n    script: state.texts.currentScript,\n    commentMode: state.comments.commentMode,\n    sendingComment: state.comments.sendingComment\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    patchTexts: text_data => dispatch(patchTexts(text_data)),\n    postTexts: text_data => dispatch(postTexts(text_data)),\n    toggleCommentMode: () => dispatch(toggleCommentMode())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Page4);\n\nvar _c;\n\n$RefreshReg$(_c, \"Page4\");","map":{"version":3,"sources":["/mnt/c/Users/moust/Documents/Scripts/frontend/src/components/scripts/script5/pages/page4/page4.js"],"names":["connect","patchTexts","postTexts","toggleCommentMode","useState","useEffect","Sidebar","ScavengerHunt","OwnActivity","Page4","props","sideBar","setSidebar","blur","setBlur","own","setOwn","scav","setScav","sendingComment","handleButtonClick","event","choice","handleCommentClick","commentMode","target","id","mapStateToProps","state","texts","curatedTextsFromCurrentScript","mentee_id","mentees","current_mentee_id","script","currentScript","comments","mapDispatchToProps","dispatch","text_data"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\r\n\r\n\r\nimport { patchTexts, postTexts } from '../../../../../actions/text';\r\nimport { toggleCommentMode } from '../../../../../actions/comment';\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport Sidebar from '../../../general pages/sidebar';\r\nimport ScavengerHunt from './scavengerhunt';\r\nimport OwnActivity from './ownactivity';\r\n \r\nconst Page4 = (props) => {\r\n\r\n    const [sideBar, setSidebar] = useState(null);\r\n    const [blur, setBlur] = useState(\"\");   \r\n    const [own, setOwn] = useState(null);\r\n    const [scav, setScav] = useState(null); \r\n\r\n    useEffect(() => {\r\n        setBlur(\"\");\r\n        setSidebar(null);\r\n      }, [props.sendingComment]);\r\n\r\n    const handleButtonClick = (event, choice) => {\r\n        /* Determines the outcome of the button press. If it's 2 then we do a scavenger hunt and render that component */\r\n        if (choice === 2){\r\n            setOwn(<OwnActivity />);\r\n            setScav(null);\r\n        }\r\n        else if (choice === 1){\r\n            setOwn(null);\r\n            setScav(<ScavengerHunt />);\r\n        }\r\n    }\r\n\r\n    const handleCommentClick = (event) => {\r\n    //Here is where you render the sidebar\r\n        if (props.commentMode === 'commentModeOn'){\r\n            if (blur === \"\"){\r\n                setBlur(\"blur\");\r\n            }\r\n            else {\r\n                setBlur(\"\");\r\n            }\r\n            if (sideBar === null){\r\n                setSidebar(<Sidebar id_tag={event.target.id} />)\r\n            }\r\n            props.toggleCommentMode();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={`sheet ${blur}`}>\r\n                <h1 className={`bold center ${props.commentMode}`} id=\"h1\" onClick={event => handleCommentClick(event)}>Icebreaker</h1>\r\n                <div className=\"left container_for_medium_margin\">\r\n                    <p className={props.commentMode} id=\"p_1\" onClick={event => handleCommentClick(event)}>Think of an activity you want to do for about 10 minutes with your mentee.</p>\r\n                    <ul id=\"button_list\">\r\n                        <li className={`li_button ${props.commentMode}`} id=\"li_1\" onClick={event => handleCommentClick(event)}><button onClick={event => handleButtonClick(event, 2)}>press</button>I want to think of my own activity</li>\r\n                        {own}\r\n                        <li className={`li_button ${props.commentMode}`} id=\"li_2\" onClick={event => handleCommentClick(event)}><button onClick={event => handleButtonClick(event, 1)}>press</button>I want to do 1 more scavenger hunt</li>\r\n                        {scav}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            {sideBar}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        texts: state.texts.curatedTextsFromCurrentScript,\r\n        mentee_id: state.mentees.current_mentee_id,\r\n        script: state.texts.currentScript,\r\n        commentMode: state.comments.commentMode,\r\n        sendingComment: state.comments.sendingComment \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        patchTexts: (text_data) => dispatch(patchTexts(text_data)),\r\n        postTexts: (text_data) => dispatch(postTexts(text_data)),\r\n        toggleCommentMode: () => dispatch(toggleCommentMode())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Page4);"]},"metadata":{},"sourceType":"module"}