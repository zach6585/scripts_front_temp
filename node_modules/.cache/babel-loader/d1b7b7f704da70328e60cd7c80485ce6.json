{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/moust/Documents/Scripts/frontend/src/components/scripts/script3/pages/page6.js\",\n    _s = $RefreshSig$();\n\nimport { connect } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { toggleCommentMode } from '../../../../actions/comment';\nimport Sidebar from '../../general pages/sidebar';\nimport checkButSmaller from \"../../pictures/checkbutsmaller.png\";\nimport redXButSmaller from \"../../pictures/redxbutsmaller.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Page6 = props => {\n  _s();\n\n  const [sideBar, setSidebar] = useState(null);\n  const [blur, setBlur] = useState(\"\");\n  const [checkWords, setCheckWords] = useState(null);\n  const [xWords, setXWords] = useState(null);\n  useEffect(() => {\n    setBlur(\"\");\n    setSidebar(null);\n  }, [props.sendingComment]);\n\n  const handleClick = (e, letter) => {\n    if (props.commentMode === 'commentModeOn') {\n      if (blur === \"\") {\n        setBlur(\"blur\");\n      } else {\n        setBlur(\"\");\n      }\n\n      if (sideBar === null) {\n        setSidebar( /*#__PURE__*/_jsxDEV(Sidebar, {\n          id_tag: e.target.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 28\n        }, this));\n      }\n\n      props.toggleCommentMode();\n    } else {\n      if (letter === 'c') {\n        setCheckWords( /*#__PURE__*/_jsxDEV(CheckMark, {\n          choice: 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 31\n        }, this));\n        setXWords(null);\n      } else if (letter === 'x') {\n        setCheckWords(null);\n        setXWords( /*#__PURE__*/_jsxDEV(CheckMark, {\n          choice: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 27\n        }, this));\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `sheet ${blur}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: `bold center ${props.commentMode}`,\n        id: \"h1_1\",\n        onClick: event => handleClick(event, \"\"),\n        children: \"Self-monitoring\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left container_for_medium_margin\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: props.commentMode,\n          id: \"p_1\",\n          onClick: event => handleClick(event, \"\"),\n          children: [\"Today we're going to talk more about noticing symptoms.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 80\n          }, this), \"Sometimes it can be hard to know how you are feeling or to notice your feelings. It can take practice.  When you know how you are feeling, you can do something to feel better.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 200\n          }, this), \"Figuring out how you are feeling is called \\u201Cself-monitoring.\\u201D  Have you heard of this before?\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: `check ${props.commentMode}`,\n            id: \"img_1\",\n            src: checkButSmaller,\n            alt: \"Check\",\n            onClick: event => handleClick(event, 'c')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: `what_does_your_mentor_say ${props.commentMode}`,\n            id: \"p_2\",\n            onClick: event => handleClick(event, ''),\n            children: \"Your mentee says yes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 163\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: `choicePicked ${props.commentMode}`,\n            id: \"p_3\",\n            onClick: event => handleClick(event, ''),\n            children: checkWords\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: `redX ${props.commentMode}`,\n            id: \"img_2\",\n            src: redXButSmaller,\n            alt: \"Red X\",\n            onClick: event => handleClick(event, 'x')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: `what_does_your_mentor_say ${props.commentMode}`,\n            id: \"p_4\",\n            onClick: event => handleClick(event, ''),\n            children: \"Your mentee says no\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 161\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: `choicePicked ${props.commentMode}`,\n            id: \"p_5\",\n            onClick: event => handleClick(event, ''),\n            children: xWords\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 30\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), sideBar]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Page6, \"efhjZRj/cJmvOwGaUqhhVQafakM=\");\n\n_c = Page6;\n\nconst CheckMark = props => {\n  const handleCommentClick = event => {\n    //Here is where you render the sidebar\n    if (props.commentMode === 'commentModeOn') {\n      if (blur === \"\") {\n        setBlur(\"blur\");\n      } else {\n        setBlur(\"\");\n      }\n\n      if (sideBar === null) {\n        setSidebar( /*#__PURE__*/_jsxDEV(Sidebar, {\n          id_tag: event.target.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 28\n        }, this));\n      }\n\n      props.toggleCommentMode();\n    }\n  };\n\n  const picker = () => {\n    /* Determines what to choose as the shown text based on if you clicked on the check or the x */\n    if (props.choice === 0) {\n      //The check was pressed\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: props.commentMode,\n          id: \"p_6\",\n          onClick: event => handleCommentClick(event),\n          children: \"That's great! How do you describe self-monitoring?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"instruction_box_number_1_page_6_script_3\",\n          className: `ital custom_svg demo_box container_for_small_margin ${props.commentMode}`,\n          onClick: event => handleCommentClick(event),\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"top_line_in_instruction_box\",\n            children: \"Give your mentee positive feedback on their definition. \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: props.commentMode,\n          id: \"p_7\",\n          onClick: event => handleCommentClick(event),\n          children: \"My definition of self-monitoring is: paying attention to how you are feeling. This might mean thinking about how your body feels. It might also mean identifying the thoughts you have in your head. You might have happy thoughts, or you might have anxious or sad thoughts. \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this);\n    } else if (props.choice === 1) {\n      //The x was pressed\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: props.commentMode,\n          id: \"p_8\",\n          onClick: event => handleCommentClick(event),\n          children: [\"That's ok! I'll tell you about it!\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 59\n          }, this), \"Self-monitoring means paying attention to how you are feeling. This might mean thinking about how your body feels. It might also mean identifying the thoughts you have in your head. You might have happy thoughts, or you might have anxious or sad thoughts.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [picker(), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: props.commentMode,\n      id: \"p_9\",\n      onClick: event => handleCommentClick(event),\n      children: [\"When you self-monitor, you can learn more about how you are feeling. This can help you change your thoughts and feelings to feel better.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 153\n      }, this), \"You can get really good at self-monitoring if you practice.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = CheckMark;\n\nconst mapStateToProps = state => {\n  return {\n    commentMode: state.comments.commentMode,\n    sendingComment: state.comments.sendingComment\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    toggleCommentMode: () => dispatch(toggleCommentMode())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Page6);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Page6\");\n$RefreshReg$(_c2, \"CheckMark\");","map":{"version":3,"sources":["/mnt/c/Users/moust/Documents/Scripts/frontend/src/components/scripts/script3/pages/page6.js"],"names":["connect","useState","useEffect","toggleCommentMode","Sidebar","checkButSmaller","redXButSmaller","Page6","props","sideBar","setSidebar","blur","setBlur","checkWords","setCheckWords","xWords","setXWords","sendingComment","handleClick","e","letter","commentMode","target","id","event","CheckMark","handleCommentClick","picker","choice","mapStateToProps","state","comments","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport { toggleCommentMode } from '../../../../actions/comment';\r\n\r\nimport Sidebar from '../../general pages/sidebar';\r\n\r\nimport checkButSmaller from \"../../pictures/checkbutsmaller.png\";\r\nimport redXButSmaller from \"../../pictures/redxbutsmaller.png\";\r\n\r\n\r\nconst Page6 = (props) => {\r\n\r\n    const [sideBar, setSidebar] = useState(null);\r\n    const [blur, setBlur] = useState(\"\"); \r\n    const [checkWords, setCheckWords] = useState(null);\r\n    const [xWords, setXWords] = useState(null);                        \r\n\r\n\r\n    useEffect(() => {\r\n        setBlur(\"\");\r\n        setSidebar(null);\r\n      }, [props.sendingComment]);\r\n\r\n    const handleClick = (e, letter) => {\r\n        if (props.commentMode === 'commentModeOn'){\r\n            if (blur === \"\"){\r\n                setBlur(\"blur\");\r\n            }\r\n            else {\r\n                setBlur(\"\");\r\n            }\r\n            if (sideBar === null){\r\n                setSidebar(<Sidebar id_tag={e.target.id} />)\r\n            }\r\n            props.toggleCommentMode();\r\n        }\r\n        else{\r\n            if (letter === 'c'){\r\n                setCheckWords(<CheckMark choice={0} />);\r\n                setXWords(null);\r\n            }\r\n            else if (letter === 'x'){\r\n                setCheckWords(null);\r\n                setXWords(<CheckMark choice={1} />);\r\n            }\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <div className={`sheet ${blur}`}>\r\n                <h1 className={`bold center ${props.commentMode}`} id=\"h1_1\" onClick={event => handleClick(event, \"\")}>Self-monitoring</h1>\r\n                <div className='left container_for_medium_margin'>\r\n                    <p className={props.commentMode} id=\"p_1\" onClick={event => handleClick(event, \"\")}>\r\n                        Today we're going to talk more about noticing symptoms.<br/>\r\n                        Sometimes it can be hard to know how you are feeling or to notice your feelings. It can take practice.  When you know how you are feeling, you can do something to feel better.<br/>\r\n                        Figuring out how you are feeling is called “self-monitoring.”  Have you heard of this before?\r\n                    </p>\r\n                    <div>\r\n                        <img className={`check ${props.commentMode}`} id=\"img_1\" src={checkButSmaller} alt=\"Check\" onClick={(event) => handleClick(event, 'c')} /><p className={`what_does_your_mentor_say ${props.commentMode}`} id=\"p_2\" onClick={(event) => handleClick(event, '')}>Your mentee says yes</p>\r\n                        <br/>\r\n                        <p className={`choicePicked ${props.commentMode}`} id=\"p_3\" onClick={(event) => handleClick(event, '')}>{checkWords}</p>\r\n                        <br/><br/>\r\n                        <img className={`redX ${props.commentMode}`} id=\"img_2\" src={redXButSmaller} alt=\"Red X\" onClick={(event) => handleClick(event, 'x')} /><p  className={`what_does_your_mentor_say ${props.commentMode}`} id=\"p_4\" onClick={(event) => handleClick(event, '')}>Your mentee says no</p>\r\n                        <br/>\r\n                        <p className={`choicePicked ${props.commentMode}`} id=\"p_5\" onClick={(event) => handleClick(event, '')}>{xWords}</p>\r\n                        <br/><br/>\r\n                    </div>\r\n                   </div>\r\n            </div>\r\n            {sideBar}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst CheckMark = (props) => {\r\n\r\n    const handleCommentClick = (event) => {\r\n        //Here is where you render the sidebar\r\n        if (props.commentMode === 'commentModeOn'){\r\n            if (blur === \"\"){\r\n                setBlur(\"blur\");\r\n            }\r\n            else {\r\n                setBlur(\"\");\r\n            }\r\n            if (sideBar === null){\r\n                setSidebar(<Sidebar id_tag={event.target.id} />)\r\n            }\r\n            props.toggleCommentMode();\r\n        }\r\n    }\r\n\r\n    const picker = () => {\r\n        /* Determines what to choose as the shown text based on if you clicked on the check or the x */\r\n        if (props.choice === 0){//The check was pressed\r\n            return (\r\n                <div>\r\n                    <p className={props.commentMode} id=\"p_6\" onClick={event => handleCommentClick(event)}>That's great! How do you describe self-monitoring?</p>\r\n                    <div id=\"instruction_box_number_1_page_6_script_3\" className={`ital custom_svg demo_box container_for_small_margin ${props.commentMode}`} onClick={event => handleCommentClick(event)}>\r\n                        <p className=\"top_line_in_instruction_box\">Give your mentee positive feedback on their definition. </p>\r\n                    </div>\r\n\r\n                    <p className={props.commentMode} id=\"p_7\" onClick={event => handleCommentClick(event)}>My definition of self-monitoring is: paying attention to how you are feeling. This might mean thinking about how your body feels. It might also mean identifying the thoughts you have in your head. You might have happy thoughts, or you might have anxious or sad thoughts. </p>\r\n                </div> \r\n            )\r\n        }\r\n        else if (props.choice === 1){//The x was pressed\r\n            return (\r\n                <div>\r\n                    <p className={props.commentMode} id=\"p_8\" onClick={event => handleCommentClick(event)}>\r\n                        That's ok! I'll tell you about it!<br/>\r\n                        Self-monitoring means paying attention to how you are feeling. This might mean thinking about how your body feels. It might also mean identifying the thoughts you have in your head. You might have happy thoughts, or you might have anxious or sad thoughts. \r\n                    </p>\r\n                </div> \r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {picker()}\r\n            <br/>\r\n            <p className={props.commentMode} id=\"p_9\" onClick={event => handleCommentClick(event)}>\r\n                When you self-monitor, you can learn more about how you are feeling. This can help you change your thoughts and feelings to feel better.<br/>\r\n                You can get really good at self-monitoring if you practice.\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        commentMode: state.comments.commentMode,\r\n        sendingComment: state.comments.sendingComment \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        toggleCommentMode: () => dispatch(toggleCommentMode())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Page6);\r\n\r\n"]},"metadata":{},"sourceType":"module"}