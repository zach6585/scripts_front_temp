{"ast":null,"code":"import { isPromise } from './util.js';\nimport { chooseMethod } from './method-chooser.js';\nimport { fillOptionsWithDefaults } from './options.js';\nexport var BroadcastChannel = function BroadcastChannel(name, options) {\n  this.name = name;\n\n  if (ENFORCED_OPTIONS) {\n    options = ENFORCED_OPTIONS;\n  }\n\n  this.options = fillOptionsWithDefaults(options);\n  this.method = chooseMethod(this.options); // isListening\n\n  this._iL = false;\n  /**\n   * _onMessageListener\n   * setting onmessage twice,\n   * will overwrite the first listener\n   */\n\n  this._onML = null;\n  /**\n   * _addEventListeners\n   */\n\n  this._addEL = {\n    message: [],\n    internal: []\n  };\n  /**\n   * Unsend message promises\n   * where the sending is still in progress\n   * @type {Set<Promise>}\n   */\n\n  this._uMP = new Set();\n  /**\n   * _beforeClose\n   * array of promises that will be awaited\n   * before the channel is closed\n   */\n\n  this._befC = [];\n  /**\n   * _preparePromise\n   */\n\n  this._prepP = null;\n\n  _prepareChannel(this);\n}; // STATICS\n\n/**\n * used to identify if someone overwrites\n * window.BroadcastChannel with this\n * See methods/native.js\n */\n\nBroadcastChannel._pubkey = true;\n/**\n * clears the tmp-folder if is node\n * @return {Promise<boolean>} true if has run, false if not node\n */\n\nexport function clearNodeFolder(options) {\n  options = fillOptionsWithDefaults(options);\n  var method = chooseMethod(options);\n\n  if (method.type === 'node') {\n    return method.clearNodeFolder().then(function () {\n      return true;\n    });\n  } else {\n    return Promise.resolve(false);\n  }\n}\n/**\n * if set, this method is enforced,\n * no mather what the options are\n */\n\nvar ENFORCED_OPTIONS;\nexport function enforceOptions(options) {\n  ENFORCED_OPTIONS = options;\n} // PROTOTYPE\n\nBroadcastChannel.prototype = {\n  postMessage: function postMessage(msg) {\n    if (this.closed) {\n      throw new Error('BroadcastChannel.postMessage(): ' + 'Cannot post message after channel has closed');\n    }\n\n    return _post(this, 'message', msg);\n  },\n  postInternal: function postInternal(msg) {\n    return _post(this, 'internal', msg);\n  },\n\n  set onmessage(fn) {\n    var time = this.method.microSeconds();\n    var listenObj = {\n      time: time,\n      fn: fn\n    };\n\n    _removeListenerObject(this, 'message', this._onML);\n\n    if (fn && typeof fn === 'function') {\n      this._onML = listenObj;\n\n      _addListenerObject(this, 'message', listenObj);\n    } else {\n      this._onML = null;\n    }\n  },\n\n  addEventListener: function addEventListener(type, fn) {\n    var time = this.method.microSeconds();\n    var listenObj = {\n      time: time,\n      fn: fn\n    };\n\n    _addListenerObject(this, type, listenObj);\n  },\n  removeEventListener: function removeEventListener(type, fn) {\n    var obj = this._addEL[type].find(function (obj) {\n      return obj.fn === fn;\n    });\n\n    _removeListenerObject(this, type, obj);\n  },\n  close: function close() {\n    var _this = this;\n\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n    var awaitPrepare = this._prepP ? this._prepP : Promise.resolve();\n    this._onML = null;\n    this._addEL.message = [];\n    return awaitPrepare // wait until all current sending are processed\n    .then(function () {\n      return Promise.all(Array.from(_this._uMP));\n    }) // run before-close hooks\n    .then(function () {\n      return Promise.all(_this._befC.map(function (fn) {\n        return fn();\n      }));\n    }) // close the channel\n    .then(function () {\n      return _this.method.close(_this._state);\n    });\n  },\n\n  get type() {\n    return this.method.type;\n  },\n\n  get isClosed() {\n    return this.closed;\n  }\n\n};\n/**\n * Post a message over the channel\n * @returns {Promise} that resolved when the message sending is done\n */\n\nfunction _post(broadcastChannel, type, msg) {\n  var time = broadcastChannel.method.microSeconds();\n  var msgObj = {\n    time: time,\n    type: type,\n    data: msg\n  };\n  var awaitPrepare = broadcastChannel._prepP ? broadcastChannel._prepP : Promise.resolve();\n  return awaitPrepare.then(function () {\n    var sendPromise = broadcastChannel.method.postMessage(broadcastChannel._state, msgObj); // add/remove to unsend messages list\n\n    broadcastChannel._uMP.add(sendPromise);\n\n    sendPromise[\"catch\"]().then(function () {\n      return broadcastChannel._uMP[\"delete\"](sendPromise);\n    });\n    return sendPromise;\n  });\n}\n\nfunction _prepareChannel(channel) {\n  var maybePromise = channel.method.create(channel.name, channel.options);\n\n  if (isPromise(maybePromise)) {\n    channel._prepP = maybePromise;\n    maybePromise.then(function (s) {\n      // used in tests to simulate slow runtime\n\n      /*if (channel.options.prepareDelay) {\n           await new Promise(res => setTimeout(res, this.options.prepareDelay));\n      }*/\n      channel._state = s;\n    });\n  } else {\n    channel._state = maybePromise;\n  }\n}\n\nfunction _hasMessageListeners(channel) {\n  if (channel._addEL.message.length > 0) return true;\n  if (channel._addEL.internal.length > 0) return true;\n  return false;\n}\n\nfunction _addListenerObject(channel, type, obj) {\n  channel._addEL[type].push(obj);\n\n  _startListening(channel);\n}\n\nfunction _removeListenerObject(channel, type, obj) {\n  channel._addEL[type] = channel._addEL[type].filter(function (o) {\n    return o !== obj;\n  });\n\n  _stopListening(channel);\n}\n\nfunction _startListening(channel) {\n  if (!channel._iL && _hasMessageListeners(channel)) {\n    // someone is listening, start subscribing\n    var listenerFn = function listenerFn(msgObj) {\n      channel._addEL[msgObj.type].forEach(function (obj) {\n        if (msgObj.time >= obj.time) {\n          obj.fn(msgObj.data);\n        }\n      });\n    };\n\n    var time = channel.method.microSeconds();\n\n    if (channel._prepP) {\n      channel._prepP.then(function () {\n        channel._iL = true;\n        channel.method.onMessage(channel._state, listenerFn, time);\n      });\n    } else {\n      channel._iL = true;\n      channel.method.onMessage(channel._state, listenerFn, time);\n    }\n  }\n}\n\nfunction _stopListening(channel) {\n  if (channel._iL && !_hasMessageListeners(channel)) {\n    // noone is listening, stop subscribing\n    channel._iL = false;\n    var time = channel.method.microSeconds();\n    channel.method.onMessage(channel._state, null, time);\n  }\n}","map":{"version":3,"sources":["/mnt/c/Users/moust/Documents/Scripts/frontend/node_modules/broadcast-channel/dist/es/broadcast-channel.js"],"names":["isPromise","chooseMethod","fillOptionsWithDefaults","BroadcastChannel","name","options","ENFORCED_OPTIONS","method","_iL","_onML","_addEL","message","internal","_uMP","Set","_befC","_prepP","_prepareChannel","_pubkey","clearNodeFolder","type","then","Promise","resolve","enforceOptions","prototype","postMessage","msg","closed","Error","_post","postInternal","onmessage","fn","time","microSeconds","listenObj","_removeListenerObject","_addListenerObject","addEventListener","removeEventListener","obj","find","close","_this","awaitPrepare","all","Array","from","map","_state","isClosed","broadcastChannel","msgObj","data","sendPromise","add","channel","maybePromise","create","s","_hasMessageListeners","length","push","_startListening","filter","o","_stopListening","listenerFn","forEach","onMessage"],"mappings":"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","sourcesContent":["import { isPromise } from './util.js';\nimport { chooseMethod } from './method-chooser.js';\nimport { fillOptionsWithDefaults } from './options.js';\nexport var BroadcastChannel = function BroadcastChannel(name, options) {\n  this.name = name;\n\n  if (ENFORCED_OPTIONS) {\n    options = ENFORCED_OPTIONS;\n  }\n\n  this.options = fillOptionsWithDefaults(options);\n  this.method = chooseMethod(this.options); // isListening\n\n  this._iL = false;\n  /**\n   * _onMessageListener\n   * setting onmessage twice,\n   * will overwrite the first listener\n   */\n\n  this._onML = null;\n  /**\n   * _addEventListeners\n   */\n\n  this._addEL = {\n    message: [],\n    internal: []\n  };\n  /**\n   * Unsend message promises\n   * where the sending is still in progress\n   * @type {Set<Promise>}\n   */\n\n  this._uMP = new Set();\n  /**\n   * _beforeClose\n   * array of promises that will be awaited\n   * before the channel is closed\n   */\n\n  this._befC = [];\n  /**\n   * _preparePromise\n   */\n\n  this._prepP = null;\n\n  _prepareChannel(this);\n}; // STATICS\n\n/**\n * used to identify if someone overwrites\n * window.BroadcastChannel with this\n * See methods/native.js\n */\n\nBroadcastChannel._pubkey = true;\n/**\n * clears the tmp-folder if is node\n * @return {Promise<boolean>} true if has run, false if not node\n */\n\nexport function clearNodeFolder(options) {\n  options = fillOptionsWithDefaults(options);\n  var method = chooseMethod(options);\n\n  if (method.type === 'node') {\n    return method.clearNodeFolder().then(function () {\n      return true;\n    });\n  } else {\n    return Promise.resolve(false);\n  }\n}\n/**\n * if set, this method is enforced,\n * no mather what the options are\n */\n\nvar ENFORCED_OPTIONS;\nexport function enforceOptions(options) {\n  ENFORCED_OPTIONS = options;\n} // PROTOTYPE\n\nBroadcastChannel.prototype = {\n  postMessage: function postMessage(msg) {\n    if (this.closed) {\n      throw new Error('BroadcastChannel.postMessage(): ' + 'Cannot post message after channel has closed');\n    }\n\n    return _post(this, 'message', msg);\n  },\n  postInternal: function postInternal(msg) {\n    return _post(this, 'internal', msg);\n  },\n\n  set onmessage(fn) {\n    var time = this.method.microSeconds();\n    var listenObj = {\n      time: time,\n      fn: fn\n    };\n\n    _removeListenerObject(this, 'message', this._onML);\n\n    if (fn && typeof fn === 'function') {\n      this._onML = listenObj;\n\n      _addListenerObject(this, 'message', listenObj);\n    } else {\n      this._onML = null;\n    }\n  },\n\n  addEventListener: function addEventListener(type, fn) {\n    var time = this.method.microSeconds();\n    var listenObj = {\n      time: time,\n      fn: fn\n    };\n\n    _addListenerObject(this, type, listenObj);\n  },\n  removeEventListener: function removeEventListener(type, fn) {\n    var obj = this._addEL[type].find(function (obj) {\n      return obj.fn === fn;\n    });\n\n    _removeListenerObject(this, type, obj);\n  },\n  close: function close() {\n    var _this = this;\n\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n    var awaitPrepare = this._prepP ? this._prepP : Promise.resolve();\n    this._onML = null;\n    this._addEL.message = [];\n    return awaitPrepare // wait until all current sending are processed\n    .then(function () {\n      return Promise.all(Array.from(_this._uMP));\n    }) // run before-close hooks\n    .then(function () {\n      return Promise.all(_this._befC.map(function (fn) {\n        return fn();\n      }));\n    }) // close the channel\n    .then(function () {\n      return _this.method.close(_this._state);\n    });\n  },\n\n  get type() {\n    return this.method.type;\n  },\n\n  get isClosed() {\n    return this.closed;\n  }\n\n};\n/**\n * Post a message over the channel\n * @returns {Promise} that resolved when the message sending is done\n */\n\nfunction _post(broadcastChannel, type, msg) {\n  var time = broadcastChannel.method.microSeconds();\n  var msgObj = {\n    time: time,\n    type: type,\n    data: msg\n  };\n  var awaitPrepare = broadcastChannel._prepP ? broadcastChannel._prepP : Promise.resolve();\n  return awaitPrepare.then(function () {\n    var sendPromise = broadcastChannel.method.postMessage(broadcastChannel._state, msgObj); // add/remove to unsend messages list\n\n    broadcastChannel._uMP.add(sendPromise);\n\n    sendPromise[\"catch\"]().then(function () {\n      return broadcastChannel._uMP[\"delete\"](sendPromise);\n    });\n    return sendPromise;\n  });\n}\n\nfunction _prepareChannel(channel) {\n  var maybePromise = channel.method.create(channel.name, channel.options);\n\n  if (isPromise(maybePromise)) {\n    channel._prepP = maybePromise;\n    maybePromise.then(function (s) {\n      // used in tests to simulate slow runtime\n\n      /*if (channel.options.prepareDelay) {\n           await new Promise(res => setTimeout(res, this.options.prepareDelay));\n      }*/\n      channel._state = s;\n    });\n  } else {\n    channel._state = maybePromise;\n  }\n}\n\nfunction _hasMessageListeners(channel) {\n  if (channel._addEL.message.length > 0) return true;\n  if (channel._addEL.internal.length > 0) return true;\n  return false;\n}\n\nfunction _addListenerObject(channel, type, obj) {\n  channel._addEL[type].push(obj);\n\n  _startListening(channel);\n}\n\nfunction _removeListenerObject(channel, type, obj) {\n  channel._addEL[type] = channel._addEL[type].filter(function (o) {\n    return o !== obj;\n  });\n\n  _stopListening(channel);\n}\n\nfunction _startListening(channel) {\n  if (!channel._iL && _hasMessageListeners(channel)) {\n    // someone is listening, start subscribing\n    var listenerFn = function listenerFn(msgObj) {\n      channel._addEL[msgObj.type].forEach(function (obj) {\n        if (msgObj.time >= obj.time) {\n          obj.fn(msgObj.data);\n        }\n      });\n    };\n\n    var time = channel.method.microSeconds();\n\n    if (channel._prepP) {\n      channel._prepP.then(function () {\n        channel._iL = true;\n        channel.method.onMessage(channel._state, listenerFn, time);\n      });\n    } else {\n      channel._iL = true;\n      channel.method.onMessage(channel._state, listenerFn, time);\n    }\n  }\n}\n\nfunction _stopListening(channel) {\n  if (channel._iL && !_hasMessageListeners(channel)) {\n    // noone is listening, stop subscribing\n    channel._iL = false;\n    var time = channel.method.microSeconds();\n    channel.method.onMessage(channel._state, null, time);\n  }\n}"]},"metadata":{},"sourceType":"module"}