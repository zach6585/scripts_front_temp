{"ast":null,"code":"import axios from 'axios';\nexport const switchChangesList = () => dispatch => {\n  //When the user changes scripts we need to change which Changes we're looking at\n  dispatch({\n    type: 'SWITCH_CHANGE_LIST'\n  });\n};\nexport const postChange = change_info => dispatch => {\n  //Setting up the defaults for the pages so we can then just change it to content editables\n  axios.post(\"https://cors-for-all.herokuapp.com/https://scripts-app-backend.herokuapp.com/changes\", {\n    id_tag: change_info.name,\n    content: change_info.content,\n    user_id: change_info.user_id,\n    script: change_info.script\n  }).then(resp => {\n    dispatch({\n      type: 'CREATE_CHANGE',\n      payload: resp.data\n    });\n  });\n};\nexport const patchChange = change_info => dispatch => {\n  axios.patch(`https://cors-for-all.herokuapp.com/https://scripts-app-backend.herokuapp.com/changes/${change_info.id}`, {\n    id_tag: change_info.name,\n    content: change_info.content,\n    user_id: change_info.user_id,\n    script: change_info.script\n  }).then(resp => dispatch({\n    type: 'CHANGE_UPDATED',\n    payload: resp.data\n  }));\n};\nexport const CHANGES_LOADING = \"LOADING\";\nexport const CHANGES_SUCCESS = \"SUCCESS\";\nexport const FAILURE = \"FAILURE\";\nexport const getChanges = script_number_and_user_id => dispatch => {\n  dispatch({\n    type: CHANGES_LOADING\n  });\n  axios.get('https://cors-for-all.herokuapp.com/https://scripts-app-backend.herokuapp.com/changes').then(res => dispatch({\n    type: CHANGES_SUCCESS,\n    payload: {\n      changes: res.data.filter(change_data => change_data.script === script_number_and_user_id.script_number.toString() && change_data.mentee_id === script_number_and_user_id.user_id),\n      script_number: script_number_and_user_id.script_number.toString()\n    }\n  })).catch(err => dispatch({\n    type: FAILURE,\n    payload: err\n  }));\n};","map":{"version":3,"sources":["/mnt/c/Users/moust/Documents/Scripts/frontend/src/actions/change.js"],"names":["axios","switchChangesList","dispatch","type","postChange","change_info","post","id_tag","name","content","user_id","script","then","resp","payload","data","patchChange","patch","id","CHANGES_LOADING","CHANGES_SUCCESS","FAILURE","getChanges","script_number_and_user_id","get","res","changes","filter","change_data","script_number","toString","mentee_id","catch","err"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAMC,QAAQ,IAAI;AAC/C;AACAA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAR;AACD,CAHI;AAMP,OAAO,MAAMC,UAAU,GAAIC,WAAD,IAAiBH,QAAQ,IAAI;AACnD;AACAF,EAAAA,KAAK,CAACM,IAAN,CAAW,sFAAX,EAAmG;AAACC,IAAAA,MAAM,EAAEF,WAAW,CAACG,IAArB;AAA2BC,IAAAA,OAAO,EAAEJ,WAAW,CAACI,OAAhD;AAAyDC,IAAAA,OAAO,EAAEL,WAAW,CAACK,OAA9E;AAAuFC,IAAAA,MAAM,EAAEN,WAAW,CAACM;AAA3G,GAAnG,EACCC,IADD,CACMC,IAAI,IAAI;AACVX,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE,eAAP;AAAwBW,MAAAA,OAAO,EAAED,IAAI,CAACE;AAAtC,KAAD,CAAR;AACH,GAHD;AAIH,CANM;AAQP,OAAO,MAAMC,WAAW,GAAIX,WAAD,IAAiBH,QAAQ,IAAI;AAClDF,EAAAA,KAAK,CAACiB,KAAN,CAAa,wFAAuFZ,WAAW,CAACa,EAAG,EAAnH,EAAsH;AAACX,IAAAA,MAAM,EAAEF,WAAW,CAACG,IAArB;AAA2BC,IAAAA,OAAO,EAAEJ,WAAW,CAACI,OAAhD;AAAyDC,IAAAA,OAAO,EAAEL,WAAW,CAACK,OAA9E;AAAuFC,IAAAA,MAAM,EAAEN,WAAW,CAACM;AAA3G,GAAtH,EACCC,IADD,CACMC,IAAI,IAAIX,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAAE,gBAAP;AAAyBW,IAAAA,OAAO,EAAED,IAAI,CAACE;AAAvC,GAAD,CADtB;AAEL,CAHM;AAKP,OAAO,MAAMI,eAAe,GAAG,SAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,SAAxB;AACP,OAAO,MAAMC,OAAO,GAAG,SAAhB;AAEP,OAAO,MAAMC,UAAU,GAAIC,yBAAD,IAA+BrB,QAAQ,IAAI;AACjEA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEgB;AAAR,GAAD,CAAR;AACAnB,EAAAA,KAAK,CAACwB,GAAN,CAAU,sFAAV,EACGZ,IADH,CACQa,GAAG,IAAIvB,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEiB,eAAR;AAAyBN,IAAAA,OAAO,EAAE;AAACY,MAAAA,OAAO,EAAED,GAAG,CAACV,IAAJ,CAASY,MAAT,CAAgBC,WAAW,IAAIA,WAAW,CAACjB,MAAZ,KAAuBY,yBAAyB,CAACM,aAA1B,CAAwCC,QAAxC,EAAvB,IAA6EF,WAAW,CAACG,SAAZ,KAA0BR,yBAAyB,CAACb,OAAhK,CAAV;AAAoLmB,MAAAA,aAAa,EAAEN,yBAAyB,CAACM,aAA1B,CAAwCC,QAAxC;AAAnM;AAAlC,GAAD,CADvB,EAEGE,KAFH,CAESC,GAAG,IAAI/B,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEkB,OAAR;AAAiBP,IAAAA,OAAO,EAAEmB;AAA1B,GAAD,CAFxB;AAGH,CALM","sourcesContent":["import axios from 'axios';\r\n\r\nexport const switchChangesList = () => dispatch => {\r\n    //When the user changes scripts we need to change which Changes we're looking at\r\n    dispatch({ type: 'SWITCH_CHANGE_LIST' })\r\n  }\r\n\r\n\r\nexport const postChange = (change_info) => dispatch => {\r\n    //Setting up the defaults for the pages so we can then just change it to content editables\r\n    axios.post(\"https://cors-for-all.herokuapp.com/https://scripts-app-backend.herokuapp.com/changes\", {id_tag: change_info.name, content: change_info.content, user_id: change_info.user_id, script: change_info.script })\r\n    .then(resp => {\r\n        dispatch({type: 'CREATE_CHANGE', payload: resp.data})\r\n    })\r\n}\r\n\r\nexport const patchChange = (change_info) => dispatch => {\r\n      axios.patch(`https://cors-for-all.herokuapp.com/https://scripts-app-backend.herokuapp.com/changes/${change_info.id}`, {id_tag: change_info.name, content: change_info.content, user_id: change_info.user_id, script: change_info.script})\r\n      .then(resp => dispatch({type: 'CHANGE_UPDATED', payload: resp.data}))\r\n}\r\n\r\nexport const CHANGES_LOADING = \"LOADING\";\r\nexport const CHANGES_SUCCESS = \"SUCCESS\";\r\nexport const FAILURE = \"FAILURE\";\r\n\r\nexport const getChanges = (script_number_and_user_id) => dispatch => {\r\n    dispatch({ type: CHANGES_LOADING })\r\n    axios.get('https://cors-for-all.herokuapp.com/https://scripts-app-backend.herokuapp.com/changes')\r\n      .then(res => dispatch({ type: CHANGES_SUCCESS, payload: {changes: res.data.filter(change_data => change_data.script === script_number_and_user_id.script_number.toString() && change_data.mentee_id === script_number_and_user_id.user_id), script_number: script_number_and_user_id.script_number.toString()}}))\r\n      .catch(err => dispatch({ type: FAILURE, payload: err}))\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}