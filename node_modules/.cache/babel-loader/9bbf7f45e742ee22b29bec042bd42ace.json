{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/moust/Documents/Scripts/frontend/src/components/scripts/script1/pages/page4.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport checkButSmaller from \"../../pictures/checkbutsmaller.png\";\nimport redXButSmaller from \"../../pictures/redxbutsmaller.png\";\nimport { connect } from 'react-redux';\nimport { patchTexts, postTexts } from '../../../../actions/text';\nimport { toggleCommentMode } from '../../../../actions/comment';\nimport { useState, useEffect } from 'react';\nimport Sidebar from '../../general pages/sidebar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Page4 = props => {\n  _s();\n\n  const [sideBar, setSidebar] = useState(null);\n  const [blur, setBlur] = useState(\"\");\n  const [currComponent, setCurrComponent] = useState(null);\n  useEffect(() => {\n    setBlur(\"\");\n    setSidebar(null);\n  }, [props.sendingComment]);\n\n  const handleClick = (e, letter) => {\n    if (props.commentMode === 'commentModeOn') {\n      if (blur === \"\") {\n        setBlur(\"blur\");\n      } else {\n        setBlur(\"\");\n      }\n\n      if (sideBar === null) {\n        setSidebar( /*#__PURE__*/_jsxDEV(Sidebar, {\n          id_tag: e.target.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 28\n        }, this));\n      }\n\n      props.toggleCommentMode();\n    } else {\n      if (letter === 'c') {\n        setCurrComponent( /*#__PURE__*/_jsxDEV(CheckPicked, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 34\n        }, this));\n      } else if (letter === 'x') {\n        setCurrComponent( /*#__PURE__*/_jsxDEV(XPicked, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 34\n        }, this));\n      }\n    }\n  };\n\n  if (currComponent === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `sheet ${blur}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: `bold center ${props.commentMode}`,\n          id: \"h1\",\n          onClick: event => handleClick(event, \"\"),\n          children: \"Icebreaker\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container_for_medium_margin\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: props.commentMode,\n              onClick: event => handleClick(event, \"\"),\n              id: \"p_1\",\n              children: [\"I think it would be fun to get to know more about each other. \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 95\n              }, this), \"We are going to play a game called \\u201Ctwo truths and a lie.\\u201D Have you ever played before?\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: `check ${props.commentMode}`,\n              id: \"img_1\",\n              src: checkButSmaller,\n              alt: \"Check\",\n              onClick: event => handleClick(event, 'c')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: `what_does_your_mentor_say ${props.commentMode}`,\n              id: \"p_2\",\n              onClick: event => handleClick(event, ''),\n              children: \"Your mentee says yes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 167\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 34\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              className: `redX ${props.commentMode}`,\n              id: \"img_2\",\n              src: redXButSmaller,\n              alt: \"Red X\",\n              onClick: event => handleClick(event, 'x')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: `what_does_your_mentor_say ${props.commentMode}`,\n              id: \"p_3\",\n              onClick: event => handleClick(event, ''),\n              children: \"Your mentee says no\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 165\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 34\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(Page4, \"I6Iub7rByGH9eCo6xErdMfD6+LA=\");\n\n_c = Page4;\n\nconst CheckPicked = props => {\n  _s2();\n\n  const [sideBar, setSidebar] = useState(null);\n  const [blur, setBlur] = useState(\"\");\n  const [currComponent, setCurrComponent] = useState(null);\n  useEffect(() => {\n    setBlur(\"\");\n    setSidebar(null);\n  }, [props.sendingComment]);\n};\n\n_s2(CheckPicked, \"I6Iub7rByGH9eCo6xErdMfD6+LA=\");\n\n_c2 = CheckPicked;\n\nconst XPicked = props => {\n  _s3();\n\n  const [sideBar, setSidebar] = useState(null);\n  const [blur, setBlur] = useState(\"\");\n  const [currComponent, setCurrComponent] = useState(null);\n  useEffect(() => {\n    setBlur(\"\");\n    setSidebar(null);\n  }, [props.sendingComment]);\n}; // const Page4 = (props) => {\n//     const [sideBar, setSidebar] = useState(null);\n//     const [blur, setBlur] = useState(\"\");                         \n//     useEffect(() => {\n//         setBlur(\"\");\n//         setSidebar(null);\n//       }, [props.sendingComment]);\n//     const handleCommentClick = (event) => {\n//         //Here is where you render the sidebar\n//         if (props.commentMode === 'commentModeOn'){\n//             if (blur === \"\"){\n//                 setBlur(\"blur\");\n//             }\n//             else {\n//                 setBlur(\"\");\n//             }\n//             if (sideBar === null){\n//                 setSidebar(<Sidebar id_tag={event.target.id} />)\n//             }\n//             props.toggleCommentMode();\n//         }\n//     }\n//     const handleChange = (event) => {\n//         const object_outcome = getObject(event.target.id)\n//         object_outcome === \"\" ? \n//         props.postTexts({value: event.target.value, id_tag: event.target.id, mentee_id: props.mentee_id, script: props.script})\n//         :\n//         props.patchTexts({value: event.target.value, id_tag: event.target.id, id: object_outcome.id, mentee_id: props.mentee_id, script: props.script})\n//     }\n//     const getObject = (current_id_tag) => {\n//         //Returns the object that has the specific id_tag\n//         let current_text = props.texts.find(text_item => {return text_item.id_tag === current_id_tag})\n//         return current_text ? current_text : \"\"\n//     }\n//     const getValue = (current_id_tag) => {\n//         //Same as getObject but instead it returns the value\n//         let current_text_for_value = props.texts.find(text_item => {return text_item.id_tag === current_id_tag})\n//         return current_text_for_value ? current_text_for_value.value : \"\"\n//     }\n//     return (\n//         <div>\n//             <div className={`sheet ${blur}`}>\n//                 <h1 className={`bold center ${props.commentMode}`} id=\"h1\" onClick={event => handleCommentClick(event)}>Icebreaker</h1>\n//                 <div className=\"left container_for_medium_margin\">\n//                     <p className={props.commentMode} onClick={event => handleCommentClick(event)} id=\"p_1\">I think it would be fun to get to know more about each other. </p>\n//                     <div id=\"instruction_box_number_1_page_4_script_2\" className={`ital custom_svg demo_box container_for_small_margin ${props.commentMode}`} onClick={event => handleCommentClick(event)}>\n//                         <img src={shareScreen} alt=\"Share Screen\" id=\"share_your_screen_page_4_script_2\" />\n//                         <p className=\"top_line_in_instruction_box\">\n//                             Click on the <textarea onChange={event => handleChange(event)} id=\"text_box_number_1_page_4_script_2\" defaultValue={getValue(\"text_box_number_1_page_4_script_2\")} placeholder='link to be inserted' /> and<br/><br/>\n//                             share your screen.<br/><br/>    \n//                             Take turns picking question to ask each other in the XXX game. \n//                         </p>\n//                     </div>\n//                     <div className='container_for_small_margin'>\n//                         <p className={props.commentMode} onClick={event => handleCommentClick(event)} id=\"p_2\">\n//                             We will click on the boxes. A question will show up in the box and we will both answer it.<br/>\n//                             If you also have a question that isn't in game, but you really want to ask me, just let me know!<br/>\n//                         </p>\n//                     </div>\n//                     <div id=\"instruction_box_number_2_page_4_script_2\" className={`ital custom_svg demo_box container_for_small_margin ${props.commentMode}`} onClick={event => handleCommentClick(event)}>\n//                         <p className=\"top_line_in_instruction_box\">When you are done with the game, stop screen sharing</p>\n//                         <img src={stopShare} alt=\"Stop share\" id=\"stop_sharing_screen_page_4_script_2\" />\n//                     </div>\n//                 </div>\n//             </div>\n//             {sideBar}\n//         </div>\n//     )\n// }\n\n\n_s3(XPicked, \"I6Iub7rByGH9eCo6xErdMfD6+LA=\");\n\n_c3 = XPicked;\n\nconst mapStateToProps = state => {\n  return {\n    texts: state.texts.curatedTextsFromCurrentScript,\n    mentee_id: state.mentees.current_mentee_id,\n    script: state.texts.currentScript,\n    commentMode: state.comments.commentMode,\n    sendingComment: state.comments.sendingComment\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    patchTexts: text_data => dispatch(patchTexts(text_data)),\n    postTexts: text_data => dispatch(postTexts(text_data)),\n    toggleCommentMode: () => dispatch(toggleCommentMode())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Page4);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Page4\");\n$RefreshReg$(_c2, \"CheckPicked\");\n$RefreshReg$(_c3, \"XPicked\");","map":{"version":3,"sources":["/mnt/c/Users/moust/Documents/Scripts/frontend/src/components/scripts/script1/pages/page4.js"],"names":["checkButSmaller","redXButSmaller","connect","patchTexts","postTexts","toggleCommentMode","useState","useEffect","Sidebar","Page4","props","sideBar","setSidebar","blur","setBlur","currComponent","setCurrComponent","sendingComment","handleClick","e","letter","commentMode","target","id","event","CheckPicked","XPicked","mapStateToProps","state","texts","curatedTextsFromCurrentScript","mentee_id","mentees","current_mentee_id","script","currentScript","comments","mapDispatchToProps","dispatch","text_data"],"mappings":"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","sourcesContent":["import checkButSmaller from \"../../pictures/checkbutsmaller.png\";\r\nimport redXButSmaller from \"../../pictures/redxbutsmaller.png\";\r\n\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nimport { patchTexts, postTexts } from '../../../../actions/text';\r\nimport { toggleCommentMode } from '../../../../actions/comment';\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport Sidebar from '../../general pages/sidebar';\r\n\r\n\r\nconst Page4 = (props) => {\r\n    const [sideBar, setSidebar] = useState(null);\r\n    const [blur, setBlur] = useState(\"\");   \r\n    const [currComponent, setCurrComponent] = useState(null);                     \r\n\r\n\r\n    useEffect(() => {\r\n        setBlur(\"\");\r\n        setSidebar(null);\r\n      }, [props.sendingComment]);\r\n\r\n    const handleClick = (e, letter) => {\r\n        if (props.commentMode === 'commentModeOn'){\r\n            if (blur === \"\"){\r\n                setBlur(\"blur\");\r\n            }\r\n            else {\r\n                setBlur(\"\");\r\n            }\r\n            if (sideBar === null){\r\n                setSidebar(<Sidebar id_tag={e.target.id} />)\r\n            }\r\n            props.toggleCommentMode();\r\n        }\r\n        else{\r\n            if (letter === 'c'){\r\n                setCurrComponent(<CheckPicked />);\r\n            }\r\n            else if (letter === 'x'){\r\n                setCurrComponent(<XPicked />);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (currComponent === null){\r\n        return(\r\n            <div>\r\n                <div className={`sheet ${blur}`}>\r\n                    <h1 className={`bold center ${props.commentMode}`} id=\"h1\" onClick={event => handleClick(event, \"\")}>Icebreaker</h1>\r\n                    <div className=\"left\">\r\n                        <div className=\"container_for_medium_margin\">\r\n                            <p className={props.commentMode} onClick={event => handleClick(event, \"\")} id=\"p_1\">\r\n                                I think it would be fun to get to know more about each other. <br/>\r\n                                We are going to play a game called “two truths and a lie.” Have you ever played before?\r\n                            </p>\r\n                        </div>\r\n                        <div>\r\n                            <img className={`check ${props.commentMode}`} id=\"img_1\" src={checkButSmaller} alt=\"Check\" onClick={(event) => handleClick(event, 'c')} /><p className={`what_does_your_mentor_say ${props.commentMode}`} id=\"p_2\" onClick={(event) => handleClick(event, '')}>Your mentee says yes</p>\r\n                            <br/><br/>\r\n                            <img className={`redX ${props.commentMode}`} id=\"img_2\" src={redXButSmaller} alt=\"Red X\" onClick={(event) => handleClick(event, 'x')} /><p  className={`what_does_your_mentor_say ${props.commentMode}`} id=\"p_3\" onClick={(event) => handleClick(event, '')}>Your mentee says no</p>\r\n                            <br/><br/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst CheckPicked = (props) => {\r\n    const [sideBar, setSidebar] = useState(null);\r\n    const [blur, setBlur] = useState(\"\");   \r\n    const [currComponent, setCurrComponent] = useState(null);                     \r\n\r\n\r\n    useEffect(() => {\r\n        setBlur(\"\");\r\n        setSidebar(null);\r\n      }, [props.sendingComment]);\r\n}\r\n\r\nconst XPicked = (props) => {\r\n    const [sideBar, setSidebar] = useState(null);\r\n    const [blur, setBlur] = useState(\"\");   \r\n    const [currComponent, setCurrComponent] = useState(null);                     \r\n\r\n\r\n    useEffect(() => {\r\n        setBlur(\"\");\r\n        setSidebar(null);\r\n      }, [props.sendingComment]);\r\n}\r\n\r\n// const Page4 = (props) => {\r\n\r\n//     const [sideBar, setSidebar] = useState(null);\r\n//     const [blur, setBlur] = useState(\"\");                         \r\n\r\n\r\n//     useEffect(() => {\r\n//         setBlur(\"\");\r\n//         setSidebar(null);\r\n//       }, [props.sendingComment]);\r\n\r\n//     const handleCommentClick = (event) => {\r\n//         //Here is where you render the sidebar\r\n//         if (props.commentMode === 'commentModeOn'){\r\n//             if (blur === \"\"){\r\n//                 setBlur(\"blur\");\r\n//             }\r\n//             else {\r\n//                 setBlur(\"\");\r\n//             }\r\n//             if (sideBar === null){\r\n//                 setSidebar(<Sidebar id_tag={event.target.id} />)\r\n//             }\r\n//             props.toggleCommentMode();\r\n//         }\r\n//     }\r\n\r\n//     const handleChange = (event) => {\r\n//         const object_outcome = getObject(event.target.id)\r\n//         object_outcome === \"\" ? \r\n//         props.postTexts({value: event.target.value, id_tag: event.target.id, mentee_id: props.mentee_id, script: props.script})\r\n//         :\r\n//         props.patchTexts({value: event.target.value, id_tag: event.target.id, id: object_outcome.id, mentee_id: props.mentee_id, script: props.script})\r\n\r\n//     }\r\n    \r\n//     const getObject = (current_id_tag) => {\r\n//         //Returns the object that has the specific id_tag\r\n//         let current_text = props.texts.find(text_item => {return text_item.id_tag === current_id_tag})\r\n//         return current_text ? current_text : \"\"\r\n//     }\r\n\r\n//     const getValue = (current_id_tag) => {\r\n//         //Same as getObject but instead it returns the value\r\n//         let current_text_for_value = props.texts.find(text_item => {return text_item.id_tag === current_id_tag})\r\n//         return current_text_for_value ? current_text_for_value.value : \"\"\r\n//     }\r\n//     return (\r\n//         <div>\r\n//             <div className={`sheet ${blur}`}>\r\n//                 <h1 className={`bold center ${props.commentMode}`} id=\"h1\" onClick={event => handleCommentClick(event)}>Icebreaker</h1>\r\n//                 <div className=\"left container_for_medium_margin\">\r\n//                     <p className={props.commentMode} onClick={event => handleCommentClick(event)} id=\"p_1\">I think it would be fun to get to know more about each other. </p>\r\n\r\n//                     <div id=\"instruction_box_number_1_page_4_script_2\" className={`ital custom_svg demo_box container_for_small_margin ${props.commentMode}`} onClick={event => handleCommentClick(event)}>\r\n//                         <img src={shareScreen} alt=\"Share Screen\" id=\"share_your_screen_page_4_script_2\" />\r\n//                         <p className=\"top_line_in_instruction_box\">\r\n//                             Click on the <textarea onChange={event => handleChange(event)} id=\"text_box_number_1_page_4_script_2\" defaultValue={getValue(\"text_box_number_1_page_4_script_2\")} placeholder='link to be inserted' /> and<br/><br/>\r\n//                             share your screen.<br/><br/>    \r\n//                             Take turns picking question to ask each other in the XXX game. \r\n//                         </p>\r\n//                     </div>\r\n//                     <div className='container_for_small_margin'>\r\n//                         <p className={props.commentMode} onClick={event => handleCommentClick(event)} id=\"p_2\">\r\n//                             We will click on the boxes. A question will show up in the box and we will both answer it.<br/>\r\n//                             If you also have a question that isn't in game, but you really want to ask me, just let me know!<br/>\r\n//                         </p>\r\n//                     </div>\r\n                    \r\n//                     <div id=\"instruction_box_number_2_page_4_script_2\" className={`ital custom_svg demo_box container_for_small_margin ${props.commentMode}`} onClick={event => handleCommentClick(event)}>\r\n//                         <p className=\"top_line_in_instruction_box\">When you are done with the game, stop screen sharing</p>\r\n//                         <img src={stopShare} alt=\"Stop share\" id=\"stop_sharing_screen_page_4_script_2\" />\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//             {sideBar}\r\n//         </div>\r\n        \r\n//     )\r\n// }\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        texts: state.texts.curatedTextsFromCurrentScript,\r\n        mentee_id: state.mentees.current_mentee_id,\r\n        script: state.texts.currentScript,\r\n        commentMode: state.comments.commentMode,\r\n        sendingComment: state.comments.sendingComment \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        patchTexts: (text_data) => dispatch(patchTexts(text_data)),\r\n        postTexts: (text_data) => dispatch(postTexts(text_data)),\r\n        toggleCommentMode: () => dispatch(toggleCommentMode())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Page4);"]},"metadata":{},"sourceType":"module"}