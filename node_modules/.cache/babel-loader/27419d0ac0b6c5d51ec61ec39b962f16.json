{"ast":null,"code":"import { microSeconds as micro, isNode } from '../util';\nexport var microSeconds = micro;\nexport var type = 'native';\nexport function create(channelName) {\n  var state = {\n    messagesCallback: null,\n    bc: new BroadcastChannel(channelName),\n    subFns: [] // subscriberFunctions\n\n  };\n\n  state.bc.onmessage = function (msg) {\n    if (state.messagesCallback) {\n      state.messagesCallback(msg.data);\n    }\n  };\n\n  return state;\n}\nexport function close(channelState) {\n  channelState.bc.close();\n  channelState.subFns = [];\n}\nexport function postMessage(channelState, messageJson) {\n  try {\n    channelState.bc.postMessage(messageJson, false);\n    return Promise.resolve();\n  } catch (err) {\n    return Promise.reject(err);\n  }\n}\nexport function onMessage(channelState, fn) {\n  channelState.messagesCallback = fn;\n}\nexport function canBeUsed() {\n  /**\n   * in the electron-renderer, isNode will be true even if we are in browser-context\n   * so we also check if window is undefined\n   */\n  if (isNode && typeof window === 'undefined') return false;\n\n  if (typeof BroadcastChannel === 'function') {\n    if (BroadcastChannel._pubkey) {\n      throw new Error('BroadcastChannel: Do not overwrite window.BroadcastChannel with this module, this is not a polyfill');\n    }\n\n    return true;\n  } else return false;\n}\nexport function averageResponseTime() {\n  return 150;\n}\nexport default {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};","map":{"version":3,"sources":["/mnt/c/Users/moust/Documents/Scripts/frontend/node_modules/broadcast-channel/dist/es/methods/native.js"],"names":["microSeconds","micro","isNode","type","create","channelName","state","messagesCallback","bc","BroadcastChannel","subFns","onmessage","msg","data","close","channelState","postMessage","messageJson","Promise","resolve","err","reject","onMessage","fn","canBeUsed","window","_pubkey","Error","averageResponseTime"],"mappings":"AAAA,SAASA,YAAY,IAAIC,KAAzB,EAAgCC,MAAhC,QAA8C,SAA9C;AACA,OAAO,IAAIF,YAAY,GAAGC,KAAnB;AACP,OAAO,IAAIE,IAAI,GAAG,QAAX;AACP,OAAO,SAASC,MAAT,CAAgBC,WAAhB,EAA6B;AAClC,MAAIC,KAAK,GAAG;AACVC,IAAAA,gBAAgB,EAAE,IADR;AAEVC,IAAAA,EAAE,EAAE,IAAIC,gBAAJ,CAAqBJ,WAArB,CAFM;AAGVK,IAAAA,MAAM,EAAE,EAHE,CAGC;;AAHD,GAAZ;;AAOAJ,EAAAA,KAAK,CAACE,EAAN,CAASG,SAAT,GAAqB,UAAUC,GAAV,EAAe;AAClC,QAAIN,KAAK,CAACC,gBAAV,EAA4B;AAC1BD,MAAAA,KAAK,CAACC,gBAAN,CAAuBK,GAAG,CAACC,IAA3B;AACD;AACF,GAJD;;AAMA,SAAOP,KAAP;AACD;AACD,OAAO,SAASQ,KAAT,CAAeC,YAAf,EAA6B;AAClCA,EAAAA,YAAY,CAACP,EAAb,CAAgBM,KAAhB;AACAC,EAAAA,YAAY,CAACL,MAAb,GAAsB,EAAtB;AACD;AACD,OAAO,SAASM,WAAT,CAAqBD,YAArB,EAAmCE,WAAnC,EAAgD;AACrD,MAAI;AACFF,IAAAA,YAAY,CAACP,EAAb,CAAgBQ,WAAhB,CAA4BC,WAA5B,EAAyC,KAAzC;AACA,WAAOC,OAAO,CAACC,OAAR,EAAP;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZ,WAAOF,OAAO,CAACG,MAAR,CAAeD,GAAf,CAAP;AACD;AACF;AACD,OAAO,SAASE,SAAT,CAAmBP,YAAnB,EAAiCQ,EAAjC,EAAqC;AAC1CR,EAAAA,YAAY,CAACR,gBAAb,GAAgCgB,EAAhC;AACD;AACD,OAAO,SAASC,SAAT,GAAqB;AAC1B;AACF;AACA;AACA;AACE,MAAItB,MAAM,IAAI,OAAOuB,MAAP,KAAkB,WAAhC,EAA6C,OAAO,KAAP;;AAE7C,MAAI,OAAOhB,gBAAP,KAA4B,UAAhC,EAA4C;AAC1C,QAAIA,gBAAgB,CAACiB,OAArB,EAA8B;AAC5B,YAAM,IAAIC,KAAJ,CAAU,qGAAV,CAAN;AACD;;AAED,WAAO,IAAP;AACD,GAND,MAMO,OAAO,KAAP;AACR;AACD,OAAO,SAASC,mBAAT,GAA+B;AACpC,SAAO,GAAP;AACD;AACD,eAAe;AACbxB,EAAAA,MAAM,EAAEA,MADK;AAEbU,EAAAA,KAAK,EAAEA,KAFM;AAGbQ,EAAAA,SAAS,EAAEA,SAHE;AAIbN,EAAAA,WAAW,EAAEA,WAJA;AAKbQ,EAAAA,SAAS,EAAEA,SALE;AAMbrB,EAAAA,IAAI,EAAEA,IANO;AAObyB,EAAAA,mBAAmB,EAAEA,mBAPR;AAQb5B,EAAAA,YAAY,EAAEA;AARD,CAAf","sourcesContent":["import { microSeconds as micro, isNode } from '../util';\nexport var microSeconds = micro;\nexport var type = 'native';\nexport function create(channelName) {\n  var state = {\n    messagesCallback: null,\n    bc: new BroadcastChannel(channelName),\n    subFns: [] // subscriberFunctions\n\n  };\n\n  state.bc.onmessage = function (msg) {\n    if (state.messagesCallback) {\n      state.messagesCallback(msg.data);\n    }\n  };\n\n  return state;\n}\nexport function close(channelState) {\n  channelState.bc.close();\n  channelState.subFns = [];\n}\nexport function postMessage(channelState, messageJson) {\n  try {\n    channelState.bc.postMessage(messageJson, false);\n    return Promise.resolve();\n  } catch (err) {\n    return Promise.reject(err);\n  }\n}\nexport function onMessage(channelState, fn) {\n  channelState.messagesCallback = fn;\n}\nexport function canBeUsed() {\n  /**\n   * in the electron-renderer, isNode will be true even if we are in browser-context\n   * so we also check if window is undefined\n   */\n  if (isNode && typeof window === 'undefined') return false;\n\n  if (typeof BroadcastChannel === 'function') {\n    if (BroadcastChannel._pubkey) {\n      throw new Error('BroadcastChannel: Do not overwrite window.BroadcastChannel with this module, this is not a polyfill');\n    }\n\n    return true;\n  } else return false;\n}\nexport function averageResponseTime() {\n  return 150;\n}\nexport default {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};"]},"metadata":{},"sourceType":"module"}