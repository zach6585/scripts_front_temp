{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/moust/Documents/Scripts/frontend/src/components/scripts/script5/pages/page9.js\";\nimport { connect } from \"react-redux\";\nimport { patchTexts, postTexts } from '../../../../actions/text';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Page9 = props => {\n  const handleChange = event => {\n    const object_outcome = getObject(event.target.id);\n    object_outcome === \"\" ? props.postTexts({\n      value: event.target.value,\n      id_tag: event.target.id,\n      mentee_id: props.mentee_id,\n      script: props.script\n    }) : props.patchTexts({\n      value: event.target.value,\n      id_tag: event.target.id,\n      id: object_outcome.id,\n      mentee_id: props.mentee_id,\n      script: props.script\n    });\n  };\n\n  const getObject = current_id_tag => {\n    //Returns the object that has the specific id_tag\n    let current_text = props.texts.find(text_item => {\n      return text_item.id_tag === current_id_tag;\n    });\n    return current_text ? current_text : \"\";\n  };\n\n  const getValue = current_id_tag => {\n    //Same as getObject but instead it returns the value\n    let current_text_for_value = props.texts.find(text_item => {\n      return text_item.id_tag === current_id_tag;\n    });\n    return current_text_for_value ? current_text_for_value.value : \"\";\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sheet\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"bold center\",\n      children: \"Practice reminder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left container_for_medium_margin\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"This week, your job will be to practice using a coping strategy. We decided that you wanted to try \", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          onChange: event => handleChange(event),\n          id: \"text_box_number_1_page_9_script_5\",\n          defaultValue: getValue(\"text_box_number_1_page_9_script_5\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 120\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"small text_under_text_box_number_1_practice_reminder\",\n        children: \"(the strategy you practiced today)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Try to do this activity at least 5 times this week.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 72\n        }, this), \"What kind of help do you think you will need to remember to practice the activity?\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"square_bullets\",\n          children: \"A reminder?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"square_bullets\",\n          children: \"Setting an alarm on your phone?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"square_bullets\",\n          children: [\"Something else: \", /*#__PURE__*/_jsxDEV(\"textarea\", {\n            onChange: event => handleChange(event),\n            id: \"text_box_number_2_page_9_script_5\",\n            defaultValue: getValue(\"text_box_number_2_page_9_script_5\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 68\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"If you have challenges with your coping strategy, you can use the website!\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 95\n        }, this), \"The mood log will help you keep track of how you feel after you do the activity. You can use body scan worksheets if they help you with the mood logs.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Page9;\n\nconst mapStateToProps = state => {\n  return {\n    texts: state.texts.curatedTextsFromCurrentScript,\n    mentee_id: state.mentees.current_mentee_id,\n    script: state.texts.currentScript\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    patchTexts: text_data => dispatch(patchTexts(text_data)),\n    postTexts: text_data => dispatch(postTexts(text_data))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Page9); // import { connect } from \"react-redux\";\n// import { patchTexts, postTexts } from '../../../actions/text';\n// const PracticeReminder = (props) => {\n//     const handleChange = (event) => {\n//         const object_outcome = getObject(event.target.id)\n//         object_outcome === \"\" ? \n//         props.postTexts({value: event.target.value, id_tag: event.target.id, mentee_id: props.mentee_id, script: props.script})\n//         :\n//         props.patchTexts({value: event.target.value, id_tag: event.target.id, id: object_outcome.id, mentee_id: props.mentee_id, script: props.script})\n//     }\n//     const getObject = (current_id_tag) => {\n//         //Returns the object that has the specific id_tag\n//         let current_text = props.texts.find(text_item => {return text_item.id_tag === current_id_tag})\n//         return current_text ? current_text : \"\"\n//     }\n//     const getValue = (current_id_tag) => {\n//         //Same as getObject but instead it returns the value\n//         let current_text_for_value = props.texts.find(text_item => {return text_item.id_tag === current_id_tag})\n//         return current_text_for_value ? current_text_for_value.value : \"\"\n//     }\n//     return(\n//         <div className=\"sheet\">\n//             <h1 className=\"bold center\">Practice reminder</h1>\n//             <div className=\"left container_for_medium_margin\">\n//                 {props.startText ? <p>{props.startText}</p> : <div className='container_for_small_margin'>\n//                 <textarea onChange={event => handleChange(event)} className=\"practice_reminder_text_box_1\" id={`text_box_number_1_practice_reminder_script_${props.script}`} defaultValue={getValue(`text_box_number_1_practice_reminder_script_${props.script}`)} />.\n//                 <p className='small text_under_text_box_number_1_practice_reminder' id={`text_under_text_box_number_1_practice_reminder_script_${props.script}`}>(the strategy you practiced today)</p>\n//                 <br/><br/><p>Try to do this activity at least 5 times this week. \n//                     <br/><br/></p></div> }\n//                 <p>\n//                     What kind of help do you think you will need to remember to practice the activity?\n//                     <br/> \n//                     Here are some ideas:\n//                 </p>\n//                     <ul>\n//                         <li className=\"square_bullets\">A reminder</li>\n//                         <li className=\"square_bullets\">Setting an alarm on your phone</li>\n//                         <li className=\"square_bullets\">Something else: <textarea className=\"practice_reminder_text_box_2\" onChange={event => handleChange(event)} id={`text_box_number_2_practice_reminder_script_${props.script}`} defaultValue={getValue(`text_box_number_2_practice_reminder_script_${props.script}`)} /></li>\n//                     </ul>\n//                 <br/><br/>\n//                 <p>\n//                     {props.endText}\n//                 </p>\n//             </div>\n//         </div>\n//     )\n// }\n// const mapStateToProps = state => {\n//     return{\n//         texts: state.texts.curatedTextsFromCurrentScript,\n//         mentee_id: state.mentees.current_mentee_id,\n//         script: state.texts.currentScript\n//     }\n// }\n// const mapDispatchToProps = dispatch => {\n//     return{\n//         patchTexts: (text_data) => dispatch(patchTexts(text_data)),\n//         postTexts: (text_data) => dispatch(postTexts(text_data))\n//     }\n// }\n// export default connect(mapStateToProps, mapDispatchToProps)(PracticeReminder);\n\nvar _c;\n\n$RefreshReg$(_c, \"Page9\");","map":{"version":3,"sources":["/mnt/c/Users/moust/Documents/Scripts/frontend/src/components/scripts/script5/pages/page9.js"],"names":["connect","patchTexts","postTexts","Page9","props","handleChange","event","object_outcome","getObject","target","id","value","id_tag","mentee_id","script","current_id_tag","current_text","texts","find","text_item","getValue","current_text_for_value","mapStateToProps","state","curatedTextsFromCurrentScript","mentees","current_mentee_id","currentScript","mapDispatchToProps","dispatch","text_data"],"mappings":"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","sourcesContent":["import { connect } from \"react-redux\";\r\nimport { patchTexts, postTexts } from '../../../../actions/text';\r\n\r\n \r\nconst Page9 = (props) => {\r\n\r\n    const handleChange = (event) => {\r\n        const object_outcome = getObject(event.target.id)\r\n        object_outcome === \"\" ? \r\n        props.postTexts({value: event.target.value, id_tag: event.target.id, mentee_id: props.mentee_id, script: props.script})\r\n        :\r\n        props.patchTexts({value: event.target.value, id_tag: event.target.id, id: object_outcome.id, mentee_id: props.mentee_id, script: props.script})\r\n\r\n    }\r\n    \r\n    const getObject = (current_id_tag) => {\r\n        //Returns the object that has the specific id_tag\r\n        let current_text = props.texts.find(text_item => {return text_item.id_tag === current_id_tag})\r\n        return current_text ? current_text : \"\"\r\n    }\r\n\r\n    const getValue = (current_id_tag) => {\r\n        //Same as getObject but instead it returns the value\r\n        let current_text_for_value = props.texts.find(text_item => {return text_item.id_tag === current_id_tag})\r\n        return current_text_for_value ? current_text_for_value.value : \"\"\r\n    }\r\n    \r\n    return(\r\n\r\n        <div className=\"sheet\">\r\n            <h1 className=\"bold center\">Practice reminder</h1>\r\n            <div className=\"left container_for_medium_margin\">\r\n                <p>\r\n                    This week, your job will be to practice using a coping strategy. We decided that you wanted to try <textarea onChange={event => handleChange(event)} id=\"text_box_number_1_page_9_script_5\" defaultValue={getValue(\"text_box_number_1_page_9_script_5\")} />.\r\n                </p>\r\n                <p className='small text_under_text_box_number_1_practice_reminder'>(the strategy you practiced today)</p>\r\n                <p>\r\n                    Try to do this activity at least 5 times this week.<br/>\r\n                    What kind of help do you think you will need to remember to practice the activity?\r\n                </p>\r\n                \r\n                <ul>\r\n                    <li className=\"square_bullets\">A reminder?</li>\r\n                    <li className=\"square_bullets\">Setting an alarm on your phone?</li>\r\n                    <li className=\"square_bullets\">Something else: <textarea onChange={event => handleChange(event)} id=\"text_box_number_2_page_9_script_5\" defaultValue={getValue(\"text_box_number_2_page_9_script_5\")} /></li>\r\n                </ul>\r\n                <p>\r\n                    If you have challenges with your coping strategy, you can use the website!<br/>\r\n                    The mood log will help you keep track of how you feel after you do the activity. You can use body scan worksheets if they help you with the mood logs.\r\n                </p>\r\n            </div>\r\n        </div>\r\n        )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        texts: state.texts.curatedTextsFromCurrentScript,\r\n        mentee_id: state.mentees.current_mentee_id,\r\n        script: state.texts.currentScript\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        patchTexts: (text_data) => dispatch(patchTexts(text_data)),\r\n        postTexts: (text_data) => dispatch(postTexts(text_data))\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Page9);\r\n\r\n\r\n// import { connect } from \"react-redux\";\r\n// import { patchTexts, postTexts } from '../../../actions/text';\r\n\r\n \r\n// const PracticeReminder = (props) => {\r\n\r\n//     const handleChange = (event) => {\r\n//         const object_outcome = getObject(event.target.id)\r\n//         object_outcome === \"\" ? \r\n//         props.postTexts({value: event.target.value, id_tag: event.target.id, mentee_id: props.mentee_id, script: props.script})\r\n//         :\r\n//         props.patchTexts({value: event.target.value, id_tag: event.target.id, id: object_outcome.id, mentee_id: props.mentee_id, script: props.script})\r\n\r\n//     }\r\n    \r\n//     const getObject = (current_id_tag) => {\r\n//         //Returns the object that has the specific id_tag\r\n//         let current_text = props.texts.find(text_item => {return text_item.id_tag === current_id_tag})\r\n//         return current_text ? current_text : \"\"\r\n//     }\r\n\r\n//     const getValue = (current_id_tag) => {\r\n//         //Same as getObject but instead it returns the value\r\n//         let current_text_for_value = props.texts.find(text_item => {return text_item.id_tag === current_id_tag})\r\n//         return current_text_for_value ? current_text_for_value.value : \"\"\r\n//     }\r\n    \r\n//     return(\r\n\r\n//         <div className=\"sheet\">\r\n//             <h1 className=\"bold center\">Practice reminder</h1>\r\n//             <div className=\"left container_for_medium_margin\">\r\n//                 {props.startText ? <p>{props.startText}</p> : <div className='container_for_small_margin'>\r\n//                 <textarea onChange={event => handleChange(event)} className=\"practice_reminder_text_box_1\" id={`text_box_number_1_practice_reminder_script_${props.script}`} defaultValue={getValue(`text_box_number_1_practice_reminder_script_${props.script}`)} />.\r\n//                 <p className='small text_under_text_box_number_1_practice_reminder' id={`text_under_text_box_number_1_practice_reminder_script_${props.script}`}>(the strategy you practiced today)</p>\r\n//                 <br/><br/><p>Try to do this activity at least 5 times this week. \r\n//                     <br/><br/></p></div> }\r\n                \r\n                \r\n//                 <p>\r\n//                     What kind of help do you think you will need to remember to practice the activity?\r\n//                     <br/> \r\n//                     Here are some ideas:\r\n//                 </p>\r\n//                     <ul>\r\n//                         <li className=\"square_bullets\">A reminder</li>\r\n//                         <li className=\"square_bullets\">Setting an alarm on your phone</li>\r\n//                         <li className=\"square_bullets\">Something else: <textarea className=\"practice_reminder_text_box_2\" onChange={event => handleChange(event)} id={`text_box_number_2_practice_reminder_script_${props.script}`} defaultValue={getValue(`text_box_number_2_practice_reminder_script_${props.script}`)} /></li>\r\n//                     </ul>\r\n//                 <br/><br/>\r\n//                 <p>\r\n//                     {props.endText}\r\n//                 </p>\r\n            \r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// const mapStateToProps = state => {\r\n//     return{\r\n//         texts: state.texts.curatedTextsFromCurrentScript,\r\n//         mentee_id: state.mentees.current_mentee_id,\r\n//         script: state.texts.currentScript\r\n//     }\r\n// }\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//     return{\r\n//         patchTexts: (text_data) => dispatch(patchTexts(text_data)),\r\n//         postTexts: (text_data) => dispatch(postTexts(text_data))\r\n\r\n//     }\r\n// }\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(PracticeReminder);\r\n\r\n"]},"metadata":{},"sourceType":"module"}