{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/moust/Documents/Scripts/frontend/src/components/scripts/script1/pages/page6.js\",\n    _s = $RefreshSig$();\n\nimport { connect } from 'react-redux';\nimport { toggleCommentMode } from '../../../../actions/comment';\nimport { useState, useEffect } from 'react';\nimport Sidebar from '../../general pages/sidebar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Page6 = props => {\n  _s();\n\n  const [sideBar, setSidebar] = useState(null);\n  const [blur, setBlur] = useState(\"\");\n  useEffect(() => {\n    setBlur(\"\");\n    setSidebar(null);\n  }, [props.sendingComment]);\n\n  const handleCommentClick = event => {\n    //Here is where you render the sidebar\n    if (props.commentMode === 'commentModeOn') {\n      if (blur === \"\") {\n        setBlur(\"blur\");\n      } else {\n        setBlur(\"\");\n      }\n\n      if (sideBar === null) {\n        setSidebar( /*#__PURE__*/_jsxDEV(Sidebar, {\n          id_tag: event.target.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 28\n        }, this));\n      }\n\n      props.toggleCommentMode();\n    }\n  };\n\n  const handleChange = event => {\n    const object_outcome = getObject(event.target.id);\n    object_outcome === \"\" ? props.postTexts({\n      value: event.target.value,\n      id_tag: event.target.id,\n      mentee_id: props.mentee_id,\n      script: props.script\n    }) : props.patchTexts({\n      value: event.target.value,\n      id_tag: event.target.id,\n      id: object_outcome.id,\n      mentee_id: props.mentee_id,\n      script: props.script\n    });\n  };\n\n  const getObject = current_id_tag => {\n    //Returns the object that has the specific id_tag\n    let current_text = props.texts.find(text_item => {\n      return text_item.id_tag === current_id_tag;\n    });\n    return current_text ? current_text : \"\";\n  };\n\n  const getValue = current_id_tag => {\n    //Same as getObject but instead it returns the value\n    let current_text_for_value = props.texts.find(text_item => {\n      return text_item.id_tag === current_id_tag;\n    });\n    return current_text_for_value ? current_text_for_value.value : \"\";\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `sheet ${blur}`,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: props.commentMode,\n        onClick: event => handleCommentClick(event),\n        id: \"p_7\",\n        children: \"We will take some time to think about our 2 truths and 1 thing that is not true. Let me know when you're ready to guess.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), sideBar]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Page6, \"XCCcHz0cDyTlGKX0ZuBjrdhgAv8=\");\n\n_c = Page6;\n\nconst mapStateToProps = state => {\n  return {\n    texts: state.texts.curatedTextsFromCurrentScript,\n    mentee_id: state.mentees.current_mentee_id,\n    script: state.texts.currentScript,\n    commentMode: state.comments.commentMode,\n    sendingComment: state.comments.sendingComment\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    patchTexts: text_data => dispatch(patchTexts(text_data)),\n    postTexts: text_data => dispatch(postTexts(text_data)),\n    toggleCommentMode: () => dispatch(toggleCommentMode())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Page6); // const CheckPicked = (props) => {\n//     const [sideBar, setSidebar] = useState(null);\n//     const [blur, setBlur] = useState(\"\");                      \n//     useEffect(() => {\n//         setBlur(\"\");\n//         setSidebar(null);\n//       }, [props.sendingComment]);\n//     const handleCommentClick = (event) => {\n//         //Here is where you render the sidebar\n//         if (props.commentMode === 'commentModeOn'){\n//             if (blur === \"\"){\n//                 setBlur(\"blur\");\n//             }\n//             else {\n//                 setBlur(\"\");\n//             }\n//             if (sideBar === null){\n//                 setSidebar(<Sidebar id_tag={event.target.id} />)\n//             }\n//             props.toggleCommentMode();\n//         }\n//     }\n//     return(\n//         \n//     )\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"Page6\");","map":{"version":3,"sources":["/mnt/c/Users/moust/Documents/Scripts/frontend/src/components/scripts/script1/pages/page6.js"],"names":["connect","toggleCommentMode","useState","useEffect","Sidebar","Page6","props","sideBar","setSidebar","blur","setBlur","sendingComment","handleCommentClick","event","commentMode","target","id","handleChange","object_outcome","getObject","postTexts","value","id_tag","mentee_id","script","patchTexts","current_id_tag","current_text","texts","find","text_item","getValue","current_text_for_value","mapStateToProps","state","curatedTextsFromCurrentScript","mentees","current_mentee_id","currentScript","comments","mapDispatchToProps","dispatch","text_data"],"mappings":"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","sourcesContent":["\r\nimport { connect } from 'react-redux';\r\n\r\nimport { toggleCommentMode } from '../../../../actions/comment';\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport Sidebar from '../../general pages/sidebar';\r\n\r\nconst Page6 = (props) => {\r\n\r\n    const [sideBar, setSidebar] = useState(null);\r\n    const [blur, setBlur] = useState(\"\");                         \r\n\r\n\r\n    useEffect(() => {\r\n        setBlur(\"\");\r\n        setSidebar(null);\r\n      }, [props.sendingComment]);\r\n\r\n    const handleCommentClick = (event) => {\r\n        //Here is where you render the sidebar\r\n        if (props.commentMode === 'commentModeOn'){\r\n            if (blur === \"\"){\r\n                setBlur(\"blur\");\r\n            }\r\n            else {\r\n                setBlur(\"\");\r\n            }\r\n            if (sideBar === null){\r\n                setSidebar(<Sidebar id_tag={event.target.id} />)\r\n            }\r\n            props.toggleCommentMode();\r\n        }\r\n    }\r\n    \r\n   const handleChange = (event) => {\r\n        const object_outcome = getObject(event.target.id)\r\n        object_outcome === \"\" ? \r\n        props.postTexts({value: event.target.value, id_tag: event.target.id, mentee_id: props.mentee_id, script: props.script})\r\n        :\r\n        props.patchTexts({value: event.target.value, id_tag: event.target.id, id: object_outcome.id, mentee_id: props.mentee_id, script: props.script})\r\n\r\n    }\r\n    \r\n    const getObject = (current_id_tag) => {\r\n        //Returns the object that has the specific id_tag\r\n        let current_text = props.texts.find(text_item => {return text_item.id_tag === current_id_tag})\r\n        return current_text ? current_text : \"\"\r\n    }\r\n\r\n    const getValue = (current_id_tag) => {\r\n        //Same as getObject but instead it returns the value\r\n        let current_text_for_value = props.texts.find(text_item => {return text_item.id_tag === current_id_tag})\r\n        return current_text_for_value ? current_text_for_value.value : \"\"\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={`sheet ${blur}`}>\r\n                <p className={props.commentMode} onClick={event => handleCommentClick(event)} id=\"p_7\">\r\n                    We will take some time to think about our 2 truths and 1 thing that is not true. Let me know when you're ready to guess.\r\n                </p>\r\n            </div>\r\n            {sideBar}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        texts: state.texts.curatedTextsFromCurrentScript,\r\n        mentee_id: state.mentees.current_mentee_id,\r\n        script: state.texts.currentScript,\r\n        commentMode: state.comments.commentMode,\r\n        sendingComment: state.comments.sendingComment \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        patchTexts: (text_data) => dispatch(patchTexts(text_data)),\r\n        postTexts: (text_data) => dispatch(postTexts(text_data)),\r\n        toggleCommentMode: () => dispatch(toggleCommentMode())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Page6);\r\n\r\n\r\n// const CheckPicked = (props) => {\r\n//     const [sideBar, setSidebar] = useState(null);\r\n//     const [blur, setBlur] = useState(\"\");                      \r\n\r\n\r\n//     useEffect(() => {\r\n//         setBlur(\"\");\r\n//         setSidebar(null);\r\n//       }, [props.sendingComment]);\r\n//     const handleCommentClick = (event) => {\r\n//         //Here is where you render the sidebar\r\n//         if (props.commentMode === 'commentModeOn'){\r\n//             if (blur === \"\"){\r\n//                 setBlur(\"blur\");\r\n//             }\r\n//             else {\r\n//                 setBlur(\"\");\r\n//             }\r\n//             if (sideBar === null){\r\n//                 setSidebar(<Sidebar id_tag={event.target.id} />)\r\n//             }\r\n//             props.toggleCommentMode();\r\n//         }\r\n//     }\r\n\r\n//     return(\r\n//         \r\n//     )\r\n// }"]},"metadata":{},"sourceType":"module"}