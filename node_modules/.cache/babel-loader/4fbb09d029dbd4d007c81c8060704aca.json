{"ast":null,"code":"import { CHANGES_LOADING, CHANGES_SUCCESS } from '../actions/change';\nconst initialState = {\n  loading: false,\n  error: \"\",\n  changesFromCurrentScript: null,\n  currentScript: \"\"\n};\nexport function changeReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  /*\r\n  This reducer will do two things: \r\n  1) Will update the changed p/h1/etc. values saved to the store so that we don't have to make multiple axios calls and \r\n  2) Will get the initial changed p/h1/etc. needed in store so that we only have to look through texts with the same script so the time checking isn't as long\r\n  Initial state will be all of the changed things that are gotten through axios.\r\n  */\n  switch (action.type) {\n    //Number 2 from above are accomplished through LOADING and SUCCESS\n    case CHANGES_LOADING:\n      return { ...state,\n        loading: true,\n        err: '',\n        changesFromCurrentScript: null\n      };\n\n    case CHANGES_SUCCESS:\n      return { ...state,\n        loading: false,\n        err: '',\n        changesFromCurrentScript: action.payload.changes,\n        currentScript: action.payload.script_number\n      };\n\n    case 'TEXT_UPDATED':\n      //Number 1 from above\n      return { ...state,\n        curatedTextsFromCurrentScript: state.curatedTextsFromCurrentScript.map(element => element.id_tag === action.payload.id_tag ? { ...element,\n          value: action.payload.value\n        } : element)\n      };\n    //Here we will have to have given the action a new text value which would be easy to get\n\n    case 'TEXT_CREATED':\n      //Also number 1 from above but for posting instead of patching\n      return { ...state,\n        curatedTextsFromCurrentScript: [...state.curatedTextsFromCurrentScript, action.payload]\n      };\n\n    case 'CHANGE_SCRIPT':\n      return { ...state,\n        curatedTextsFromCurrentScript: null,\n        currentScript: \"\"\n      };\n\n    default:\n      // If the reducer doesn't care about this action type,\n      // return the existing state unchanged\n      return state;\n  }\n}","map":{"version":3,"sources":["/mnt/c/Users/moust/Documents/Scripts/frontend/src/reducers/changereducer.js"],"names":["CHANGES_LOADING","CHANGES_SUCCESS","initialState","loading","error","changesFromCurrentScript","currentScript","changeReducer","state","action","type","err","payload","changes","script_number","curatedTextsFromCurrentScript","map","element","id_tag","value"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,eAA1B,QAAiD,mBAAjD;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,KADU;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,wBAAwB,EAAE,IAHP;AAInBC,EAAAA,aAAa,EAAE;AAJI,CAArB;AAOA,OAAO,SAASC,aAAT,GAAqD;AAAA,MAA9BC,KAA8B,uEAAtBN,YAAsB;AAAA,MAARO,MAAQ;;AACxD;AACJ;AACA;AACA;AACA;AACA;AACI,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAKV,eAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELL,QAAAA,OAAO,EAAE,IAFJ;AAGLQ,QAAAA,GAAG,EAAE,EAHA;AAILN,QAAAA,wBAAwB,EAAE;AAJrB,OAAP;;AAOF,SAAKJ,eAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELL,QAAAA,OAAO,EAAE,KAFJ;AAGLQ,QAAAA,GAAG,EAAE,EAHA;AAILN,QAAAA,wBAAwB,EAAEI,MAAM,CAACG,OAAP,CAAeC,OAJpC;AAKLP,QAAAA,aAAa,EAAEG,MAAM,CAACG,OAAP,CAAeE;AALzB,OAAP;;AAQF,SAAK,cAAL;AAAqB;AACnB,aAAO,EACL,GAAGN,KADE;AAELO,QAAAA,6BAA6B,EAAEP,KAAK,CAACO,6BAAN,CAAoCC,GAApC,CAAwCC,OAAO,IAC5EA,OAAO,CAACC,MAAR,KAAmBT,MAAM,CAACG,OAAP,CAAeM,MAAlC,GAA2C,EAAC,GAAGD,OAAJ;AAAaE,UAAAA,KAAK,EAAEV,MAAM,CAACG,OAAP,CAAeO;AAAnC,SAA3C,GAAuFF,OAD1D;AAF1B,OAAP;AAIG;;AAEH,SAAK,cAAL;AAAqB;AACrB,aAAO,EACL,GAAGT,KADE;AAELO,QAAAA,6BAA6B,EAAE,CAAC,GAAGP,KAAK,CAACO,6BAAV,EAAyCN,MAAM,CAACG,OAAhD;AAF1B,OAAP;;AAKA,SAAK,eAAL;AACA,aAAM,EACJ,GAAGJ,KADC;AAEJO,QAAAA,6BAA6B,EAAE,IAF3B;AAGJT,QAAAA,aAAa,EAAE;AAHX,OAAN;;AAMF;AACE;AACA;AACA,aAAOE,KAAP;AA1CJ;AA4CD","sourcesContent":["import { CHANGES_LOADING, CHANGES_SUCCESS } from '../actions/change';\r\nconst initialState = {\r\n  loading: false,\r\n  error: \"\",\r\n  changesFromCurrentScript: null,\r\n  currentScript: \"\"\r\n}\r\n\r\nexport function changeReducer(state = initialState, action) {\r\n    /*\r\n    This reducer will do two things: \r\n    1) Will update the changed p/h1/etc. values saved to the store so that we don't have to make multiple axios calls and \r\n    2) Will get the initial changed p/h1/etc. needed in store so that we only have to look through texts with the same script so the time checking isn't as long\r\n    Initial state will be all of the changed things that are gotten through axios.\r\n    */\r\n    switch (action.type) {\r\n      //Number 2 from above are accomplished through LOADING and SUCCESS\r\n      case CHANGES_LOADING:\r\n        return {\r\n          ...state,\r\n          loading: true,\r\n          err: '',\r\n          changesFromCurrentScript: null\r\n\r\n        }\r\n      case CHANGES_SUCCESS:\r\n        return {\r\n          ...state,\r\n          loading: false,\r\n          err: '',\r\n          changesFromCurrentScript: action.payload.changes,\r\n          currentScript: action.payload.script_number\r\n        }\r\n\r\n      case 'TEXT_UPDATED': //Number 1 from above\r\n        return {\r\n          ...state,\r\n          curatedTextsFromCurrentScript: state.curatedTextsFromCurrentScript.map(element => \r\n            element.id_tag === action.payload.id_tag ? {...element, value: action.payload.value} : element)\r\n         } //Here we will have to have given the action a new text value which would be easy to get\r\n      \r\n        case 'TEXT_CREATED': //Also number 1 from above but for posting instead of patching\r\n        return {\r\n          ...state, \r\n          curatedTextsFromCurrentScript: [...state.curatedTextsFromCurrentScript, action.payload]\r\n        }\r\n      \r\n        case 'CHANGE_SCRIPT':\r\n        return{\r\n          ...state,\r\n          curatedTextsFromCurrentScript: null,\r\n          currentScript: \"\"\r\n        }\r\n      \r\n      default:\r\n        // If the reducer doesn't care about this action type,\r\n        // return the existing state unchanged\r\n        return state\r\n    }\r\n  }\r\n\r\n"]},"metadata":{},"sourceType":"module"}